Collecting test cases:
- stuff evaluation was the easiest one - Guillaume did not wanna break the code. He only tests, what's on the eval sheet and the modules. We wants to check that we understand the project.
  -> Guillaume asks in the beginning who did which tasks of the code and asks everyone due to that questions!

- frontend container for responsive design? (desktop + mobile) Frameworks are available (f.e. react, tailwind css)

- checking docker logs from all containers + error notifications that maybe not appear in front end.
- having developer console from browser open in front end (to check f.e. if back end does not reply, permission denied, ...) NO ERROR should pop up here
- Testing chat functions (User invites other user, User changes user rights and change also from other users, block other users, combinations of everything, ...)

- authorising with 42, and then click "no I don't want" --> what's the behavior?
- registration credentials not saved proper, cannot be used for login (check docker logs)
- login via 42 intra does not work
- .env file needs to be created manually and not in repo!!! (for eval)

From the old subject:
General Instructions
Preliminary tests
- Any credentials, API keys, environment variables must be set inside a .env file during the evaluation. In 
case any credentials, API keys are available in the git repository and outside of the .env file created 
during the evaluation, the evaluation stop and the mark is 0. (Make sure the HTTP requests file is not present)
- Ensure the docker compose file is at the root of the repository.
- Run the "docker-compose up --build" command.
- Since the rating of this project is more flexible, do not stop the evaluation process unless you encounter a 
500 error, a crash, or anything that actually doesn't work within the project scope.

Backend
- The backend must be developed using the NestJS framework.
- The database must be a PostgreSQL database.
- During the whole evaluation process, there must be no unhandled warning or error.

Frontend
- The frontend must be done using a TypeScript framework.
- Any TypeScript/JavaScript library is allowed.
- During the whole evaluation process, there must be no unhandled warning or error.

Basic checks
- The website is available at the address chosen by the students.
- The user can login using the 42 intranet OAuth feature.
- When logged for the first time, the user is prompted to add information to their account (display, name/nickname, avatar, and so forth).
- If not logged, the user has access to only little or no information and is prompted to sign in.
- The website is a Single Page Application. The user can use the "Back" and "Forward" buttons of the web 
browser.
- You can browse the website using the latest version of Chrome and one additionnal browser (we chose Firefox) without encountering any problems or errors.

The website
Security concerns
- Ensure that the website is secured. 
- Check the database to verify that passwords are hashed.
- Check the server for server-side validation/sanitization on forms and any user input.

User profile - private
- When logged in, the user has access to their profile where they can edit their information. For instance, they can change their nickname (which must be unique) or their avatar (which is a default avatar if not set).

User profile - public
- Users can see the profile of other users. A profile contains basic informations such as their nickname, their avatar, or a button to add them as friends.
- User can block other users. This means they won't receive private messages from the accounts they blocked nor view their messages in public/private channels. (add a link to the profile of the user from the leaderboard)

Friend interface
- The user has access to a friends interface, where they can see their friends and their status (offline/online/in a game/and so forth) (is the status of the avatar in a game does not change when the players are playing?)
- They also have access to basics informations about them (name/nickname, avatar and so forth).

Friend interface
- The user can enable/disable 2FA (two-factor authentication). If enabled, they must pass it in order to sign in.
- For example, 2FA can use Google Authenticator, a text message, an email, and so forth.

