"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from re import DEBUG
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '10.12.14.3', '*',]

# only for development
REDIRECT_URI = 'https://10.12.14.3'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework', # Django REST Framework
    'rest_framework_simplejwt', # JWT
    'corsheaders', # CORS - Cross-Origin Resource Sharing
    'django_extensions', # Django Extensions
    'api_accounts.apps.ApiAccountsConfig', # Accounts API
    'api_buddy', # Buddy API
    'frontend', # Frontend
    'django_otp', # 2FA
    'django_otp.plugins.otp_totp', # 2FA
    'django_otp.plugins.otp_static', # 2FA
    'channels', # Channels
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS - Cross-Origin Resource Sharing
    'django.middleware.locale.LocaleMiddleware', # Support for multiple languages !!Must be before CommonMiddleware!!
    'django.middleware.common.CommonMiddleware',
]

SESSION_COOKIE_SECURE = True

CSRF_COOKIE_SECURE = True

USE_I18N = True

LANGUAGES = [
    ('en', 'English'),
    ('de', 'German'),
    ('fr', 'French'),
    ('es', 'Spanish'),
    ('it', 'Italian'),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# channels layers as default backend for websockets
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [('redis', 6379)],
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# channels routing
ASGI_APPLICATION = "api_accounts.routing.application"

if DEBUG == True:
    CORS_ALLOW_ALL_ORIGINS = True
else:
     CORS_ALLOWED_ORIGINS = [
         "http://localhost:8000",
         "http://127.0.0.1:8000",
         "http://:8000",
         "https://localhost",
         "https://10.12.14.3",
     ]

CSRF_TRUSTED_ORIGINS = ['https://10.12.14.3', 'https://172.20.248.62']

CORS_ALLOW_HEADERS = [
    'Authorization',
    'authorization',
    'contentType',
    'Content-Type',
    'X-CSRFToken',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'api_accounts.authentication.ExpiredTokensJWTAuthentication',
    ],
}

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

AUTH_USER_MODEL = 'api_accounts.Player'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

if DEBUG == True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'ft_transcendence_users',
            'USER': 'ft_transcendence_user',
            'PASSWORD': 'ft_transcendence_password',
            'HOST': 'postgres',
            'PORT': 5432,
        }
    }
else:
    database_url = os.getenv('URL_DATABASE')
    if database_url:
        DATABASES = {'default': dj_database_url.parse(database_url)}
    else:
        raise ValueError('URL_DATABASE environment variable not set')


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

if DEBUG == True:
    STATIC_ROOT = [BASE_DIR / 'static',]
else:
    STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = '/avatars/'
MEDIA_ROOT = BASE_DIR / 'avatars'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ('email', 'username'),
            'max_similarity': 0.5,
        }
    },

    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },

    # checks against a list of 20,000 common password created by Royce Williams
    # https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },

    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]